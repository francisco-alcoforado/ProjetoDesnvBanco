/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

/**
 *
 * @author lab01
 */
import br.aeso.exercicio.cliente.Cliente;
import br.aeso.exercicio.cliente.ClienteNaoExncontradoException;
import br.aeso.exercicio.fachada.Fachada;
import br.aeso.exercicio.pedido.Pedido;
import br.aeso.exercicio.pedido.PedidoJaCadastradoException;
import br.aeso.exercicio.pedido.PedidoNaoEncontradoException;
import br.aeso.exercicio.util.ComboItem;
import br.aeso.exercicio.vendedor.Vendedor;
import br.aeso.exercicio.vendedor.VendedorNaoEncontradoException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
public class FormularioPedido extends javax.swing.JInternalFrame {

    /**
     * Creates new form FormularioPedido
     */
    public FormularioPedido() {
        initComponents();
        this.carregarClientes();
        this.carregarVendedores();
    }
    
    public FormularioPedido(Pedido Pedido) {
        initComponents();
        this.carregarClientes();
        this.carregarVendedores();
        if(Pedido == null){
            System.out.println("Pedido Vasio on FormAtualizar!!!");
            return;
        }
        this.codigo = Pedido.getCodigo();
        this.valor = Pedido.getValor();
        DefaultComboBoxModel modelCliente = (DefaultComboBoxModel) this.vendedor.getModel();
        for(int i = 0; i < modelCliente.getSize(); i++){
            ComboItem combo = (ComboItem) modelCliente.getElementAt(i);
            if(combo.getValue() == Pedido.getVendedor().getCodigo()){
                this.vendedor.setSelectedIndex(i);
            }
        }
        DefaultComboBoxModel modelVendedor = (DefaultComboBoxModel) this.vendedor.getModel();
        for(int i = 0; i < modelVendedor.getSize(); i++){
            ComboItem combo = (ComboItem) modelVendedor.getElementAt(i);
            if(combo.getValue() == Pedido.getVendedor().getCodigo()){
                this.vendedor.setSelectedIndex(i);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbRua = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        Erros = new javax.swing.JLabel();
        Atualizar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        vendedor = new javax.swing.JComboBox<>();
        cliente = new javax.swing.JComboBox<>();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Formulario Cliente");
        setPreferredSize(new java.awt.Dimension(880, 500));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        lbRua.setText("Cliente");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCadastrarMouseClicked(evt);
            }
        });
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        Atualizar.setText("Atualizar");
        Atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarActionPerformed(evt);
            }
        });

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("Vendedor");

        vendedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(255, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Erros, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbRua)
                                    .addComponent(jLabel1))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vendedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(237, 237, 237))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbRua)
                    .addComponent(cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vendedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelar)
                    .addComponent(Atualizar)
                    .addComponent(btnCadastrar))
                .addGap(26, 26, 26)
                .addComponent(Erros, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addGap(139, 139, 139))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void carregarClientes(){
        Fachada fachada = new Fachada();
        try {
            this.clientes = fachada.listarCliente();
            int i = 0;
            DefaultComboBoxModel model = (DefaultComboBoxModel) this.cliente.getModel();
            model.removeAllElements();
            ComboItem[] item;
            item = new ComboItem[this.clientes.size()];
            for(Cliente cliente : this.clientes){
               String strItem = cliente.getCodigo() + " - " + cliente.getNome();
               ComboItem combo = new ComboItem();
               combo.setLabel(strItem);
               combo.setValue(cliente.getCodigo());
               model.addElement(combo);
               i++;
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void carregarVendedores(){
        Fachada fachada = new Fachada();
        try {
            this.vendedores = fachada.listarVendedor();
            int i = 0;
            DefaultComboBoxModel model = (DefaultComboBoxModel) this.vendedor.getModel();
            model.removeAllElements();
            ComboItem[] item;
            item = new ComboItem[this.vendedores.size()];
            for(Vendedor vendedor : this.vendedores){
               String strItem = vendedor.getCodigo() + " - " + vendedor.getNome();
               ComboItem combo = new ComboItem();
               combo.setLabel(strItem);
               combo.setValue(vendedor.getCodigo());
               model.addElement(combo);
               i++;
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnCadastrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCadastrarMouseClicked
        // TODO add your handling code here:
        boolean resposta = this.validar();
        if(resposta == false){
            Erros.setText("");
            Erros.setText("Campo(s) obrigatorio(s) mal preenchido!!!");
            Erros.setVisible(true);
            
        }
        double valor = 0.0;
        ComboItem itemCliente = (ComboItem) this.cliente.getSelectedItem();
        int codigoCliente = itemCliente.getValue();
        ComboItem itemVendedor = (ComboItem) this.vendedor.getSelectedItem();
        int codigoVendedor = itemVendedor.getValue();
        Cliente cliente = this.getCliente(codigoCliente);
        if(cliente == null){
            Erros.setText("Cliente Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Vendedor vendedor = this.getVendedor(codigoVendedor);
        if(vendedor == null){
            Erros.setText("Fornecedor Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Date data = new Date();
        Fachada fachada = new Fachada();
        Pedido Pedido = new Pedido(codigo, cliente, vendedor, valor, data);
        try {
            fachada.cadastrarPedido(Pedido);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PedidoJaCadastradoException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PedidoNaoEncontradoException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClienteNaoExncontradoException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (VendedorNaoEncontradoException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnCadastrarMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
        Erros.setVisible(false);
    }//GEN-LAST:event_formFocusGained

    private void AtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarActionPerformed
        boolean resposta = this.validar();
        if(resposta == false){
            Erros.setText("");
            Erros.setText("Campo(s) obrigatorio(s) mal preenchido!!!");
            Erros.setVisible(true);
            
        }
        double valor = this.valor;
        ComboItem itemCliente = (ComboItem) this.cliente.getSelectedItem();
        int codigoCliente = itemCliente.getValue();
        ComboItem itemVendedor = (ComboItem) this.vendedor.getSelectedItem();
        int codigoVendedor = itemVendedor.getValue();
        Cliente cliente = this.getCliente(codigoCliente);
        if(cliente == null){
            Erros.setText("Cliente Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Vendedor vendedor = this.getVendedor(codigoVendedor);
        if(vendedor == null){
            Erros.setText("Fornecedor Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Date data = new Date(); 
        Pedido Pedido = new Pedido(this.codigo, cliente, vendedor, valor, data);
        System.out.println(Pedido.getCodigo());
        Fachada fachada = new Fachada();
        try {
            fachada.atualizarPedido(Pedido);
        } catch (PedidoNaoEncontradoException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_AtualizarActionPerformed
    private Cliente getCliente(int codigo){
        for(Cliente cliente : this.clientes){
            if(codigo == cliente.getCodigo()){
                return cliente;
            }
        }
        return null;
    }
    private Vendedor getVendedor(int codigo){
        for(Vendedor vendedor : this.vendedores){
            if(codigo == vendedor.getCodigo()){
                return vendedor;
            }
        }
        return null;
    }
    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        this.dispose();
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelarActionPerformed
    private boolean validar(){
        if(Double.isNaN(this.valor)){
            return false;
        }
        return true;
    }
    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioPedido().setVisible(true);
            }
        });
    }
    private int codigo;
    private double valor;
    private ArrayList<Cliente> clientes;
    private ArrayList<Vendedor> vendedores;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Atualizar;
    private javax.swing.JLabel Erros;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox<String> cliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbRua;
    private javax.swing.JComboBox<String> vendedor;
    // End of variables declaration//GEN-END:variables
}
