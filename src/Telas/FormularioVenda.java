/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

/**
 *
 * @author lab01
 */
import br.aeso.exercicio.fachada.Fachada;
import br.aeso.exercicio.fornecedor.Fornecedor;
import br.aeso.exercicio.cliente.Cliente;
import br.aeso.exercicio.cliente.ClienteNaoExncontradoException;
import br.aeso.exercicio.pedido.Pedido;
import br.aeso.exercicio.pedido.PedidoNaoEncontradoException;
import br.aeso.exercicio.produto.Produto;
import br.aeso.exercicio.produto.ProdutoNaoEncontradoException;
import br.aeso.exercicio.util.ComboItem;
import br.aeso.exercicio.venda.Venda;
import br.aeso.exercicio.venda.VendaJaCadastradaException;
import br.aeso.exercicio.venda.VendaNaoEncontradaException;
import br.aeso.exercicio.vendedor.Vendedor;
import br.aeso.exercicio.vendedor.VendedorNaoEncontradoException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
public class FormularioVenda extends javax.swing.JInternalFrame {

    /**
     * Creates new form FormularioVenda
     */
    public FormularioVenda() {
        initComponents();
        this.carregarProdutos();
        this.carregarPedidos();
    }
    
    public FormularioVenda(Venda Venda) {
        initComponents();
        this.carregarProdutos();
        this.carregarPedidos();
        if(Venda == null){
            System.out.println("Venda Vasio on FormAtualizar!!!");
            return;
        }
        this.codigo = Venda.getCodigo();
        this.valor.setText("" + Venda.getValor());
        this.quantidade.setText("" + Venda.getQuantidade());
        DefaultComboBoxModel modelProduto = (DefaultComboBoxModel) this.produto.getModel();
        for(int i = 0; i < modelProduto.getSize(); i++){
            ComboItem combo = (ComboItem) modelProduto.getElementAt(i);
            if(combo.getValue() == Venda.getProduto().getCodigo()){
                this.produto.setSelectedIndex(i);
            }
        }
        DefaultComboBoxModel modelPedido = (DefaultComboBoxModel) this.pedido.getModel();
        for(int i = 0; i < modelPedido.getSize(); i++){
            ComboItem combo = (ComboItem) modelPedido.getElementAt(i);
            if(combo.getValue() == Venda.getPedido().getCodigo()){
                this.pedido.setSelectedIndex(i);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbCPF = new javax.swing.JLabel();
        valor = new javax.swing.JTextField();
        lbQuant = new javax.swing.JLabel();
        quantidade = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        Erros = new javax.swing.JLabel();
        Atualizar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        produto = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        pedido = new javax.swing.JComboBox<>();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Formulario Cliente");
        setPreferredSize(new java.awt.Dimension(880, 500));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        lbCPF.setText("Valor");

        valor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valorFocusGained(evt);
            }
        });
        valor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorActionPerformed(evt);
            }
        });

        lbQuant.setText("Quantidade");

        quantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                quantidadeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantidadeFocusLost(evt);
            }
        });
        quantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantidadeActionPerformed(evt);
            }
        });

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCadastrarMouseClicked(evt);
            }
        });
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        Atualizar.setText("Atualizar");
        Atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarActionPerformed(evt);
            }
        });

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("Produto");

        produto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        produto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                produtoItemStateChanged(evt);
            }
        });

        jLabel2.setText("Pedido");

        pedido.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(242, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbCPF)
                                .addComponent(lbQuant)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addGap(33, 33, 33)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(quantidade)
                                .addComponent(valor)
                                .addComponent(produto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Erros, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(240, 240, 240))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbQuant)
                    .addComponent(quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(produto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelar)
                    .addComponent(Atualizar)
                    .addComponent(btnCadastrar))
                .addGap(49, 49, 49)
                .addComponent(Erros, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addGap(86, 86, 86))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void valorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valorActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void carregarProdutos(){
        Fachada fachada = new Fachada();
        try {
            this.produtos = fachada.listarProduto();
            int i = 0;
            DefaultComboBoxModel model = (DefaultComboBoxModel) this.produto.getModel();
            model.removeAllElements();
            ComboItem[] item;
            item = new ComboItem[this.produtos.size()];
            for(Produto Produto : this.produtos){
               String strItem = Produto.getCodigo() + " - " + Produto.getNome();
               ComboItem combo = new ComboItem();
               combo.setLabel(strItem);
               combo.setValue(Produto.getCodigo());
               model.addElement(combo);
               i++;
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void carregarPedidos(){
        Fachada fachada = new Fachada();
        
        try {
            this.pedidos = fachada.listarPedido();
            int i = 0;
            DefaultComboBoxModel model = (DefaultComboBoxModel) this.pedido.getModel();
            model.removeAllElements();
            ComboItem[] item;
            item = new ComboItem[this.pedidos.size()];
            for(Pedido pedido : this.pedidos){
               String strItem = pedido.getCodigo() + " - " + pedido.getCliente().getNome();
               ComboItem combo = new ComboItem();
               combo.setLabel(strItem);
               combo.setValue(pedido.getCodigo());
               model.addElement(combo);
               i++;
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClienteNaoExncontradoException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (VendedorNaoEncontradoException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        }          
    }
    private void btnCadastrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCadastrarMouseClicked
        // TODO add your handling code here:
        boolean resposta = this.validar();
        if(resposta == false){
            Erros.setText("");
            Erros.setText("Campo(s) obrigatorio(s) mal preenchido!!!");
            Erros.setVisible(true);
            
        }
        double valor = Double.parseDouble(this.valor.getText());
        int quantidade = Integer.parseInt(this.quantidade.getText());
        ComboItem itemProduto = (ComboItem) this.produto.getSelectedItem();
        int codigoProduto = itemProduto.getValue();
        ComboItem itemPedido = (ComboItem) this.pedido.getSelectedItem();
        int codigoPedido = itemPedido.getValue();
        Produto produto = this.getProduto(codigoProduto);
        if(produto == null){
            Erros.setText("Cliente Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Pedido pedido = this.getPedido(codigoPedido);
        if(pedido == null){
            Erros.setText("Fornecedor Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Date data = new Date(); 
        Venda Venda = new Venda(1, pedido, produto, quantidade, valor, data);
        Fachada fachada = new Fachada();
        try {
            fachada.cadastrarVenda(Venda);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (VendaNaoEncontradaException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (VendaJaCadastradaException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProdutoNaoEncontradoException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PedidoNaoEncontradoException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_btnCadastrarMouseClicked
    private Produto getProduto(int codigo){
        for(Produto produto : this.produtos){
            if(codigo == produto.getCodigo()){
                return produto;
            }
        }
        return null;
    }
    private Pedido getPedido(int codigo){
        for(Pedido pedido : this.pedidos){
            if(codigo == pedido.getCodigo()){
                return pedido;
            }
        }
        return null;
    }
    private void valorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorFocusGained
        // TODO add your handling code here:
        Erros.setVisible(false);
    }//GEN-LAST:event_valorFocusGained

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
        Erros.setVisible(false);
    }//GEN-LAST:event_formFocusGained

    private void quantidadeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantidadeFocusGained
        // TODO add your handling code here:
        Erros.setVisible(false);
    }//GEN-LAST:event_quantidadeFocusGained

    private void quantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantidadeActionPerformed

    private void AtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarActionPerformed
        boolean resposta = this.validar();
        if(resposta == false){
            Erros.setText("");
            Erros.setText("Campo(s) obrigatorio(s) mal preenchido!!!");
            Erros.setVisible(true);
            
        }
        double valor = Double.parseDouble(this.valor.getText());
        int quantidade = Integer.parseInt(this.quantidade.getText());
        ComboItem itemProduto = (ComboItem) this.produto.getSelectedItem();
        int codigoProduto = itemProduto.getValue();
        ComboItem itemPedido = (ComboItem) this.pedido.getSelectedItem();
        int codigoPedido = itemPedido.getValue();
        Produto produto = this.getProduto(codigoProduto);
        if(produto == null){
            Erros.setText("Cliente Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Pedido pedido = this.getPedido(codigoPedido);
        if(pedido == null){
            Erros.setText("Fornecedor Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        Date data = new Date(); 
        Venda Venda = new Venda(codigo, pedido, produto, quantidade, valor, data);
        System.out.println(Venda.getCodigo());
        Fachada fachada = new Fachada();
        try {
            fachada.atualizarVenda(Venda);
        } catch (VendaJaCadastradaException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FormularioVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AtualizarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        this.dispose();
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelarActionPerformed

    private void quantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantidadeFocusLost
        this.setValor();
    }//GEN-LAST:event_quantidadeFocusLost

    private void produtoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_produtoItemStateChanged
        if(this.quantidade.getText().isEmpty() == false){
            this.setValor();
        }
    }//GEN-LAST:event_produtoItemStateChanged
    private void setValor(){
        ComboItem itemProduto = (ComboItem) this.produto.getSelectedItem();
        int codigoProduto = itemProduto.getValue();
        Produto produto = this.getProduto(codigoProduto);
        if(produto == null){
            Erros.setText("Cliente Invalido!!!");
            Erros.setVisible(true);
            return;
        }
        int quantidade = Integer.parseInt(this.quantidade.getText());
        double valor = produto.getValor();
        double val = valor * quantidade;
        this.valor.setText("" + val);
    }
    private boolean validar(){
        if(Double.isNaN(Double.parseDouble(this.valor.getText()))){
            return false;
        }
        if(Double.isNaN(Integer.parseInt(this.quantidade.getText())))
            return false;
        return true;
    }
    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioVenda().setVisible(true);
            }
        });
    }
    private int codigo;
    private ArrayList<Produto> produtos;
    private ArrayList<Pedido> pedidos;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Atualizar;
    private javax.swing.JLabel Erros;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton cancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbCPF;
    private javax.swing.JLabel lbQuant;
    private javax.swing.JComboBox<String> pedido;
    private javax.swing.JComboBox<String> produto;
    private javax.swing.JTextField quantidade;
    private javax.swing.JTextField valor;
    // End of variables declaration//GEN-END:variables
}
